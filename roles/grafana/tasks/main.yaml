---
- name: Check exists
  become: yes
  shell: grafana-server -v
  register: existGrafana
  ignore_errors: yes

- name: Download grafana deb
  get_url:
    url: "{{ grafana.url }}/{{ grafana.deb }}"
    dest: /home/pi/{{ grafana.deb }}
    mode: 0644
    timeout: 60
  when: existGrafana.rc != 0

- name: Install grafana deb
  become: yes
  apt:
    deb: /home/pi/{{ grafana.deb }}
  when: existGrafana.rc != 0

- name: Delete grafana deb
  become: yes
  file:
    path: /home/pi/{{ grafana.deb }}
    state: absent
  when: existGrafana.rc != 0

- name: Load grafana admin password from file
  shell: cat /home/pi/.grafanaAdminPass
  register: grafanaAdminPassReaded

- name: Load duckDnsUrl from file
  shell: cat /home/pi/.duckDnsUrl
  register: duckDnsUrlReaded

- name: Fill /etc/grafana/grafana.ini with template
  become: yes
  template:
    src: grafana.ini
    dest: /etc/grafana/grafana.ini
    owner: root
    group: grafana
    mode: 0640

- name: Make sure grafana-server is enabled and restarted
  become: yes
  service:
    name: grafana-server
    state: restarted 
    enabled: yes

- name: Wait for grafana 3000 port
  wait_for:
    port: 3000
    delay: 10

- name: Link influxdb datasource
  shell: "sleep 15 && curl 'http://admin:admin@127.0.0.1:3000/api/datasources' -X POST -H 'Content-Type: application/json;charset=UTF-8' --data-binary '{\"name\":\"{{ influx.db.name }}\",\"type\":\"influxdb\",\"url\":\"http://127.0.0.1:{{ influx.http.port }}\",\"access\":\"proxy\",\"isDefault\":true,\"database\":\"{{ influx.db.name }}\"}'"
  when: existGrafana.rc != 0

- name: Change grafana admin password	
  shell: "curl -X PUT -H 'Content-Type: application/json' -d '{\"oldPassword\":\"admin\",\"newPassword\":\"{{ grafanaAdminPassReaded.stdout }}\",\"confirmNew\":\"{{ grafanaAdminPassReaded.stdout }}\"}' 'http://admin:admin@127.0.0.1:3000/api/user/password'"
  register: resultGrafanaPassAdmin
  failed_when: '"changed" not in resultGrafanaPassAdmin.stdout'
  when: existGrafana.rc != 0

- name: Setup dashboards load folder
  become: yes
  blockinfile:
    path: /etc/grafana/provisioning/dashboards/loadDashboardsFrom.yaml
    create: yes
    mode: 0640
    owner: root
    group: grafana
    block: |
        apiVersion: 1
        providers:
         - name: 'loadDashboardsFrom'
           orgId: 1
           folder: ''
           type: file
           options:
             path: {{ grafana.dashboards_folder }}

- name: Creates grafana load dashboards folder
  become: yes
  file:
    path: "{{ grafana.dashboards_folder }}"
    owner: root
    group: grafana
    mode: 0755
    state: directory

- name: Fill common dashboards with template
  become: yes
  template:
    src: "{{ item }}.json"
    dest: "{{ grafana.dashboards_folder }}/{{ item }}.json"
    owner: root
    group: root
    mode: 0644
  with_items:
    - piStatus
    - networkStatus

- name: Fill /usr/share/grafana/public/home.json with template
  become: yes
  template:
    src: home.json
    dest: /usr/share/grafana/public/dashboards/home.json
    owner: root
    group: root
    mode: 0644

- name: Create temp folder
  file:
    path: /tmp/grafana_temp
    mode: 0777
    state: directory

- name: Setup api stuff script
  template:
    src: apiStuff.sh
    dest: "/tmp/grafana_temp/apiStuff.sh"
    mode: 0777

- name: Execute scripts
  shell: "{{ item }}"
  when: existGrafana.rc != 0
  with_items:
    - /tmp/grafana_temp/apiStuff.sh

- name: Delete temp folder
  file:
    path: /tmp/grafana_temp
    state: absent
  when: existGrafana.rc != 0

- name: Restart grafana-server
  become: yes 
  service:
    name: grafana-server
    state: restarted
